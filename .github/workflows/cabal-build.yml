name: Cabal CI build of master

on:
  schedule:
  - cron: '5 */6 * * *'
  push:

jobs:

  build:
    name: Build master with ${{ matrix.ghc }} / ${{ matrix.cabal }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.6.5', '8.8.1']
        cabal: ['3.0']
        os: ['ubuntu-18.04']
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.cabal_cache_aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.cabal_cache_aws_secret_access_key }}
      CABAL_CACHE: ./tmp/bin/cabal-cache
      SYNC_TO_CACHE: ./tmp/bin/cabal-cache sync-to-archive --threads 16 --archive-uri s3://cabal-cache/${{ matrix.os }} --region us-east-1
      SYNC_FROM_CACHE: $CABAL_CACHE sync-from-archive --threads 16 --archive-uri s3://cabal-cache/${{ matrix.os }} --region us-east-1
      SYNC_TO_DIST_CACHE: aws s3 sync dist-newstyle "s3://cabal-cache/dist/${{ matrix.os }}/${{ matrix.ghc }}/dist-newstyle"
      SYNC_FROM_DIST_CACHE: aws s3 sync "s3://cabal-cache/dist/${{ matrix.os }}/${{ matrix.ghc }}/dist-newstyle" dist-newstyle

    steps:

    # Setup
    - uses: actions/checkout@v1
      with:
        ref: "master"
    - name: Install cabal-cache (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: |
        mkdir -p "./tmp/bin"
        curl -Ls "https://github.com/haskell-works/cabal-cache/releases/download/v1.0.1.1/cabal-cache_x86_64_linux.tar.gz" | tar -xzC "./tmp/bin/"

    - name: Setup Haskell (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      uses: actions/setup-haskell@v1
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Install non-Haskell dependencies (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: sudo apt-get install -y git librocksdb-dev zlib1g-dev libtinfo-dev libsqlite3-dev libz3-dev z3
    - name: Append cabal.project (ghc-8.8.1)
      if: matrix.ghc == '8.8.1'
      run: |
        cat >> cabal.project <<EOF
        documentation: false

        package chainweb
          ghc-options: -Wwarn
          haddock-options: --optghc=-Wwarn
          documentation: false

        package chainweb
          ghc-options: -fwrite-ide-info
          ghc-options: -hiedir ./dist-newstyle/hie

        package pact
          ghc-options: -Wwarn
          haddock-options: --optghc=-Wwarn

        source-repository-package
          type: git
          location: http://github.com/larskuhtz/ixset-typed.git
          tag: 335c8e31d39be873a429fc9814060bf928ad0ee9

        source-repository-package
          type: git
          location: http://github.com/osa1/data-dword.git
          tag: 573d7b5fdd3635ade9bc1cf8fd88a1bf8059f78f

        source-repository-package
          type: git
          location: http://github.com/LeventErkok/sbv.git
          tag: 2476a36316e00df40061f9257528f4df6f324927

        allow-newer:
          asn1-encoding:base
          compactable:base
          fake:*
          ixset-typed:safecopy
          ixset-typed:template-haskell
          pact:*
          paths:*
          safecopy:template-haskell
          strict-tuple:base
          these:*
          token-bucket:base
        EOF
    - name: Append cabal.project (not ghc-8.8.1)
      if: matrix.ghc != '8.8.1'
      run: |
        cat >> cabal.project <<EOF
        documentation: false

        package chainweb
          documentation: false
        EOF

    - name: Sync from dist cache
      run: eval $SYNC_FROM_DIST_CACHE
      continue-on-error: true

    # Build
    - name: Update package database
      run: cabal v2-update
    - name: Configure build
      run: cabal v2-configure --enable-tests
    - name: Sync from cabal cache
      run: eval $SYNC_FROM_CACHE
    - name: Install build dependencies
      run: cabal v2-build --only-dependencies
    - name: Build
      run: cabal v2-build
    - name: Install test dependencies
      run: cabal v2-build --only-dependencies --enable-tests
    - name: Run tests
      run: cabal v2-run chainweb-tests -- --hide-successes
    - name: Build documentation
      run: cabal v2-haddock --haddock-hyperlink-source --haddock-quickjump
    - name: Sync caches cache sync
      if: always()
      run: |
        eval $SYNC_TO_CACHE
        eval $SYNC_TO_DIST_CACHE

    # Publish Artifacts
    - name: Prepare artifacts
      run: |
        mkdir -p dist-newstyle/artifacts/applications
        mkdir -p dist-newstyle/artifacts/docs
        cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-*/build/*/{chainweb-miner,chainweb-node,cwtool} dist-newstyle/artifacts/applications
        cp -r dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-*/doc/html/chainweb* dist-newstyle/artifacts/docs
    - name: Publish applications
      uses: actions/upload-artifact@v1
      with:
        name: chainweb-applications
        path: dist-newstyle/artifacts/applications
    - name: Publish hie files (only ghc-8.8.1)
      if: matrix.ghc == '8.8.1'
      uses: actions/upload-artifact@v1
      with:
        name: hie-files
        path: dist-newstyle/hie
    - name: Publish API documentation
      uses: actions/upload-artifact@v1
      with:
        name: api-documentation
        path: dist-newstyle/artifacts/docs

    - name: Publish applications to S3
      run: |
        export BINFILE="chainweb.${{ matrix.ghc }}.${{ matrix.os }}.$(git rev-parse --short HEAD).tar.gz"
        tar -C ./dist-newstyle/artifacts/applications/ -czf $BINFILE chainweb-node chainweb-miner cwtool
        aws s3 cp $BINFILE s3://apps.lakuhtz/

# TODO
#
# * [x] upload artifacts: binaries, docs
# * [x] job that syncs master from main repo and runs build
# * [x] cabal-cache (or docker volumne on github package registry?)
# * [ ] docker build (publish to github registry and/or docker registry)
# * [x] upload binaries to S3
# * [ ] publish documentation to github pages
# * [ ] run slow tests
# * [ ] mac builds
# * [ ] windows build
# * [x] add schedule
# * [ ] do profiling build
# * [ ] prevent races for dist cache. Store per branch (fall back to master)
# * [x] synchronize cache while building dependencies
# * [x] synchronize dist-newstyle directory
